WHITESPACE = _{ " " }

letter = {ASCII_ALPHA_UPPER}
digit = {ASCII_DIGIT}

// infix
plus = @{"+"}
minus = @{"-"}
multiply = @{"*"}
divide = @{"/"}
pow = @{"^"}

// relational
ge = @{">="}
le = @{ "<=" }
lt = @{ "<" }
gt = @{ ">" }
eq = @{"="}
neq = @{"<>"}

// supplied
abs = @{"ABS"}
atn = @{"ATN"}
cos = @{"COS"}
exp = @{"EXP"}
int = @{"INT"}
log = @{"LOG"}
rnd = @{"RND"}
sgn = @{"SGN"}
sin = @{"SIN"}
sqr = @{"SQR"}
tan = @{"TAN"}

quote = { "\"" }
plain_string_character = { "+" | "-" | "." | digit | letter }
unquoted_string = @{ plain_string_character+ ~ ( " "+ ~ plain_string_character+)* }
quoted_string = @{ quote ~ (!(quote | NEWLINE) ~ ANY)* ~ quote }

program = ${ block ~ end_line }
block = ${ (line | for_block)* }
line = !{ line_number ~ statement ~ end_of_line }
line_number_ref = @{ ASCII_DIGIT{1,4} }
line_number = @{ ASCII_DIGIT{1,4} ~ " "}
end_of_line = _{ NEWLINE }
end_line = !{ line_number ~ end_statement ~ end_of_line? ~ EOI }
end_statement = @{ "END" }

statement = { data_statement | def_statement |
    dimension_statement | gosub_statement |
    goto_statement | if_then_statement |
    input_statement | let_statement |
    on_goto_statement | option_statement |
    print_statement | randomize_statement |
    read_statement | remark_statement |
    restore_statement | return_statement |
    stop_statement }

data_statement = { "DATA " ~ datum ~ ("," ~ datum)* }
datum = { quoted_string | unquoted_string }

def_statement = { "DEF " ~ numeric_defined_function ~ parameter_list? ~ "=" ~ numeric_expression }
numeric_defined_function = @{ "FN" ~ letter }
parameter_list = { "(" ~ parameter ~ ")" }
parameter = { simple_numeric_variable }

dimension_statement = { "DIM " ~ array_declaration ~ ("," ~ array_declaration)* }
array_declaration = { numeric_array_name ~ "(" ~ bounds ~ ")" }
bounds = { integer ~ ("," ~ integer)? }

gosub_statement = { "GO" ~ "SUB " ~ line_number_ref }
goto_statement = { "GO" ~ "TO " ~ line_number_ref }

if_then_statement = { "IF " ~ relational_expression ~ "THEN" ~ line_number_ref }
relational_expression = { (numeric_expression ~ relation ~ numeric_expression) 
                          | (string_expression ~ equality_relation ~ string_expression) }
relation = { equality_relation | ge | le | lt | gt }
equality_relation = { eq | neq }

input_statement = { "INPUT " ~ variable_list }

// let
let_statement = { numeric_let_statement | string_let_statement }
numeric_let_statement   = { "LET " ~ numeric_variable ~ "=" ~ numeric_expression }
string_let_statement = { "LET " ~ string_variable  ~ "=" ~ string_expression }

on_goto_statement = { "ON " ~ numeric_expression ~ "GO" ~ "TO" ~ line_number_ref ~ ( "," ~ line_number_ref)*  }
option_statement = { "OPTION " ~ "BASE" ~ base }
base = @{"0" | "1"}

print_statement = { ("PRINT " ~ print_list) | "PRINT" }
print_list = { (print_item? ~ print_separator)* ~ print_item? }
print_item = { tab_call | expression }
tab_call = { "TAB" ~ "(" ~ numeric_expression ~ ")" }
print_separator = { "," | ";" }

randomize_statement = { "RANDOMIZE" }
read_statement = { "READ " ~ variable_list }
remark_statement = { "REM" ~ (!NEWLINE ~ ANY)* }
restore_statement = { "RESTORE" }
return_statement = { "RETURN" }
stop_statement = { "STOP" }

numeric_constant = { sign? ~ numeric_rep }
sign = { plus | minus }
numeric_rep = { significand ~ exrad? }
significand = { (integer? ~ fraction) | (integer ~ "."?) }
integer = @{ ASCII_DIGIT+ }
fraction = @{ "." ~ ASCII_DIGIT+ }
exrad = @{ "E" ~ sign? ~ integer }
string_constant = { quoted_string }

variable = { string_variable | numeric_variable }
variable_list = { variable ~ ("," ~ variable)* }
numeric_variable = { numeric_array_element | simple_numeric_variable }
simple_numeric_variable = @{ letter ~ ASCII_DIGIT? }
numeric_array_element  = { numeric_array_name ~ subscript }
numeric_array_name = { letter }
subscript = { "(" ~ numeric_expression ~ ( "," ~ numeric_expression )?  ~ ")" }
string_variable = @{ letter ~ "$" }

expression = { string_expression | numeric_expression }
numeric_expression = { sign? ~ term ~ (sign ~ term)* }
term = { factor ~ (multiplier ~ factor)* }
factor = { primary ~ (pow ~ primary)* }
multiplier = { multiply | divide }
primary = {  
    numeric_rep 
  | numeric_function_ref 
  | numeric_variable
  | ( "(" ~ numeric_expression ~ ")" ) }
numeric_function_ref  = { numeric_function_name ~ argument_list? }
numeric_function_name = { numeric_defined_function | numeric_supplied_function }
argument_list = { "(" ~ argument ~ ")" }
argument = { numeric_expression }
string_expression  = { string_variable | string_constant }
numeric_supplied_function = { abs | atn | cos | exp | int | log | rnd | sgn | sin | sqr | tan }

//
// for
//
for_block = { for_line ~ for_body }
for_body = { block ~ next_line }
for_line = !{ line_number ~ for_statement ~ end_of_line }
next_line = !{ line_number ~ next_statement ~ end_of_line }
for_statement = { "FOR" ~ simple_numeric_variable ~  "=" ~ numeric_expression  ~ "TO" ~ numeric_expression ~ ( "STEP" ~ numeric_expression)?  }
next_statement = { "NEXT" ~ simple_numeric_variable }